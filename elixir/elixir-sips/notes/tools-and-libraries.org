* Elixir Sips - Tools and Libraries

** Elixir Standard Library

*** Enum

- `Enum.all?` - Returns `true` when all items in the collection
  returns `true` for a provided *predicate*.
- `Enum.any?` - Returns `true` when any item in the collection
  returns `true` for a provided *predicate*.
- `Enum.at` - Returns an item from collection by zero-based index. If
  there is no such index, returns `nil`.
- `Enum.chunks` - Returns chunks of collection by specified size, step
  and padding.
- `Enum.chunks_by` - Starts a new chunk at each place that returns
  `true` for the provided *predicate*.
- `Enum.concat` - Concatenates list of lists into a single list. Also
  works with ranges.
- `Enum.count` - It returns number of items in the collection, but
  also with provided *predicate* it returns number of items that
  returns `true` when applied to it.
- `Enum.drop` - It drops the first `count` items in the collection.
- `Enum.drop_while` - It drops items in the beginning of the
  collection while *predicate* returns `true`.
- `Enum.each` - Invokes *predicate* for each element in the
  collection.
- `Enum.empty?` - Returns `true` when collection is empty.
- `Enum.fetch` - Returns tuple with atom `:ok` and element on the
  given index in the collection if exists, or `:error` when it does
  not. If you call it with `!` at the end, it raises an
  `OutOfBoundsError` (this version returns only value, not a tuple
  when succeeds).
- `Enum.filter` - It filters the collection, by a given *predicate*.
- `Enum.filter_map` - It filters and maps the value in the one
  pass. You have to specify two *funs*.
- `Enum.find` - It returns first item, which returns `true` from a
  given *predicate*. You can specify a default, instead of `nil`.
- `Enum.find_index` - As above, but it returns an index.
- `Enum.find_value` - As above, but it returns value returned from a
  provided *fun*.
- `Enum.first` - Returns first element from the collection or `nil` if
  the collection is empty.
- `Enum.flat_map` - Returns a modified collection, modification is
  performed by a *fun* provided in the invocation which has to return
  a collection.
- `Enum.join` - Joins a collection with a *joiner*. By default
  *joiner* is an empty binary.
- `Enum.map` - Maps a collection, each item in new collection is a
  result of provided *fun*.
- `Enum.map_join` - Maps and join collection at one pass. Defaults as
  above.
- `Enum.map_reduce` - Performs map-reduce on a collection in one
  pass. Provided *fun* should return a tuple which has in first
  element new mapped element and in second one updated accumulator.
- `Enum.max` - Maximum value from collection.
- `Enum.max_by` - Maximum value from collection transformed by a given
  *fun*.
- `Enum.min` - Minimum value from collection.
- `Enum.min_by` - Minimum value from collection transformed by a given
  *fun*.
- `Enum.member?` - Checks if a value is a member of collection.
- `Enum.partition` - Partitions a collection into two collections, one
  collection contain elements which returned *truthy* value by a given
  predicate, second one which returned *falsy* value.
- `Enum.reduce` - Reducer across collection by a given *fun*. First
  argument used as a starting value.
- `Enum.reject` - Rejects values which are return `true` for a given
  *predicate*.
- `Enum.reverse` - Reverses the collection.
- `Enum.shuffle` - Shuffles the collection.
- `Enum.slice` - Returns a subset list for a given collections. It
  expects an index and a size of subset.
- `Enum.sort` - Merge sort algorithm invoked on a collection. You can
  pass a *comparator fun*.
- `Enum.split` - Splits a collection in a given index, if index is
  negative it counts backwards
- `Enum.split_while` - Splits a collection into two while *predicate*
  returns `true`.
- `Enum.take` - Takes first `n` elements from a collection.
- `Enum.take_every` - It takes every element starting from the first
  incremented by a provided `step`.
- `Enum.take_while` - Takes first elements while *predicate* returns
  `true`.
- `Enum.to_list` - Converts collection to a list.
- `Enum.uniq` - Removes duplicated items.
- `Enum.with_index` - It returns collection where each element is a
  tuple which contains an actual value and index (beware of order in a
  tuple).
- `Enum.zip` - Zips together two collections, resulting collection is
  a list of tuples. If the second list is shorter, missing values are
  filled with `nil`.

*** Streams

- Lazy, composable enumerables.
  - `Stream.repeatedly(fn() -> 1 end) |> Enum.take(10)`
  - `Stream.repeatedly(&:random.uniform/0) |> Enum.take(10)`
  - `Stream.cycle([1,2,3]) |> Enum.take(10)`
  - Bigger example:
    ```
    file_stream = Stream.resource(fn -> File.open!("/usr/share/dict/words") end,
                                  fn(file) ->
                                    case IO.read(file, :line) do
                                      data when is_binary(data) -> {data, file}
                                      _ -> nil
                                    end
                                  end,
                                  fn(file) -> File.close(file) end)
    file_stream |> Stream.take_every(200) |> Enum.take(10)
    file_stream |> Stream.drop(2000) |> Stream.take(4) |> Enum.to_list |> Stream.cycle |> Enum.take(20)
    ```

*** Agent

- Simple abstraction around state.
  - Replacement for `gen_server` which only modifies the state.
  - [[../samples/agent_playground][Example usage]]

*** Task

- Simple abstraction for computing a value in the background and
  receiving the value asynchronously later.
  - [[../samples/website_pipeline][Example usage]]

** Erlang Standard Library

*** gs

- Deprecated *Erlang* graphics subsystem, replaces by *wx*.
  - It will be removed in incoming release - *18.0*.

*** xmerl

- Built-in *Erlang* module for parsing *XML*.
  - [[../samples/xml_parsing][Example usage]]

*** dbg

- Tracing functions, processes and messages in *Erlang* / *Elixir*.
  - Help methods - `:dbg.h`
  - List of actual traces - `:dbg.i`
  - Trace invocation - `:dbg.c(:"Elixir.Foo", :bar, [])`
  - Start tracer server - `:dbg.tracer`
    - Trace process interactions - `:dbg.p(pid, [:m, :procs])`

*** ssh

- Built-in module for interacting with SSH.
- OTP is shipped with an implementation of SSH daemon.
  - You can connect to it from the any authorized *Erlang* shell.
  - Interacting with *Elixir* code needs to be done in particular way,
    but it is pleasant and possible.

*** pg2

- A replacement for `pg` module that has better semantics for
  distribution.
  - `pg2` expands to *Process Group*.
  - [[../samples/string_processes][Example use case]]

*** egd

- Erlang Standard Graphics library.
  - Example:
    ```
    defmodule Image do
      @width 800
      @height 800
      @num_shades 50
      @colors for r <- 0..@num_shades,
                  g <- 0..@num_shades,
                  b <- 0..@num_shades,
                  do: {r, g, b}

      @pixel_positions for x <- 0..@width,
                           y <- 0..@height,
                           do: [x, y]
      @filename '/tmp/test.png`

      def run do
        image = :egd.create(@width, @height)
        for [x, y] <- @pixel_positions do
          :egd.filledRectangle(
            image, {x, y}, {x, y}, 
            :egd.color(Enum.at(@colors, x + y))
          )
        end
        :egd.save(:egd.render(image, :png), @filename)
      end

      def display do
        System.cmd("open", [ @filename ])
      end
    end

    Image.run
    Image.display
    ```

** OTP

*OTP* is a *Open Telecom Platform*. Set of libraries for building
reliable and distributed systems.

*** gen_server

- Generic request/reply server implementation.
  - [[../samples/OTP/gen_server_playground][Example implementation with tests]]

*** gen_fsm

- Generic *finite state machine* implementation.
  - [[../samples/OTP/gen_fsm_playground][Example implementation with tests]]

*** gen_event

- Generic *event handler and dispatcher* implementation.
  - [[../samples/OTP/zeldacat][Example implementation with tests]]

*** supervisor

- Generic behavior for managing, observing and restarting other
  processes.
  - [[../samples/OTP/supervised_list_server][Example implementation with tests]]

*** gen_tcp

- Module with set of functions related with TCP connection handling
  and sockets.
  - [[../samples/OTP/tcp_server][Example implementation with tests]]

*** Distribution

- `iex --name "foo@0.0.0.0"` - the same as adding name to the Erlang
  session.
  - `:erlang.register(:shell, self)` - registering the named process
    across the cluster.
  - For local sessions, you don't have to setup a *cookie* (it is
    already shared because of the file defined in your home
    directory).
    - For remote nodes you have to define the *identical cookie*, it
      is the only security mechanism built-in to the Erlang VM.
  - Joe Armstrong's favorite program:
    ```
    receive do
      {:become, some_fn} -> some_fn.()
    end
    ```

*** Port

- Interacting with external programs, as if they are acting as a
  simple process.
  - `Port.open({:spawn, "ls"}, [])`
    - You received result asynchronously, to your mailbox as a normal
      message from the different process.
  - Another example:
    ```
    port = Port.open(
      {:spawn, "bash --noediting -i"},
      [:stderr_to_stdout, :binary, :exit_status]
    )
    ```
    - Interacting:
      - `send(port, {self, {:command, "pwd\n"}})`
      - `send(port, {self, {:command, <<27>>}})`

*** Observer

- Graphical tool for inspection a running *Erlang* / *Elixir* system
  and its processes.
  - `:observer.start`

*** Digraph

- Erlang built-in module which represents a directed graph data
  structure and related algorithms.
  - [[../samples/digraph_maps][Example use case]]

*** ETS and DETS

- *ETS* stands for *Erlang Term Storage* which is an in-memory
  key-value store built-in to Erlang's platform.
  - It has also persistent version called *DETS*
    (*Disk Erlang Term Storage*).
  - [[../samples/ets_playground][Example use case for both]]
 
*** inet

- Basic *TCP* / *IP* implementations in the *Erlang* standard library. 
  - `inet:getaddr("google.com", inet).`
  - `rr("/opt/erlang/17.4/lib/kernel-3.1/include/inet.hrl").`
  - `{ok, Ent=#hostent{}} = inet:gethostbyname("google.com").`
  - `inet:gethostbyaddr({192,30,252,154}).`
  - `inet:getifaddrs().`
  - `inet:parse_ipv4_address("127.0.0.1").`
  - `inet:getaddr("google.com", inet6).`
  - `inet:parse_address("2001:4860:4860::8888").`

*** Code

- `Code` is a module which exposes *compiler* and *code server* to the user.
  - `{3, []} = Code.eval_string("1 + 2")`
  - `{1, [foo: 1]} = Code.eval_string("foo = 1")`
  - `Code.eval_string("foo")` raises a `CompileError`. 
  - `{1, [foo: 1]} = Code.eval_string("foo", [foo: 1])`
  - `Code.eval_string("foo", [], file: "madeup.exs", line: 2)`
  - `__ENV__` and `binding` function.

** Hex

- Package manager and repository for *BEAM* languages.
  - Not only limited to the *Elixir* environment.
  - List of local tasks - `mix local`.
    - Searching packages - `mix hex.search actor`.
    - Package information - `mix hex.info exactor`.
  - Using *API* pragmatically:
    - `Hex.API.get_package("exactor")`
    - `Hex.API.get_release("exactor", "0.3.0")`

*** `hexdocs` on hex.pm 

- You need to authenticate with `hex.pm`, if you pushed a first package you
  already are.
  - You should declare `:ex_doc` and `:markdown` dependencies to use only in the
    `:docs` environment.
  - Then compile and push the docs by `MIX_ENV=docs mix hex.docs`.

** Ecto

- https://github.com/elixir-lang/ecto
- A database wrapper and language integrated query for Elixir.
  - [[../samples/ecto_test][Example usage]]

** Amnesia

- https://github.com/meh/amnesia
- Wrapper for Erlang's Mnesia database written in Elixir.
** HTTP Clients

- Note: none of modules presented below is an *Elixir* library:
  - httpc (built-in `:inets` client).
  - ibrowse (external dependency).
  - hackney (external dependency).
- [[../samples/http_client_survey][Example usage]]

** ExActor

- Library that simplifies generation and using of `gen_server`.
- [[../samples/exactor_test][Example usage]]

** Plug

- Web framework for *Elixir*.
  - It allows you to built composable web applications.
  - It is similar regarding behavior and features to *Ruby's Rack* or
    *Python's WSGI*.
  - Build as an replacement for *Dynamo*.

*** Plug.Static

- Serving static assets with proper *mime/type* by default
  from directory `/priv/static`.
  - You can use it instead the complicated *Cowboy* handler.

** Weber

- Elixir MVC web framework.
  - https://github.com/elixir-web/weber
  - Note: it is not compatible with *Elixir 1.0*.
- Nice benchmark performed (with use of `wrk`):
  - Rack (GET request with *Hello World*): ~350 req/s
  - Node.js (GET request with *Hello World*): ~11k req/s
  - Weber in Elixir (standard template, more than previous): ~14k req/s

** IEx.pry

- Built-in inspection tool for running processes.
  - After invoking `IEx.pry` it will ask you to allow open a new
    session. After accepting that you will have access to the whole
    lexical scope of actually running process.
  - [[../samples/iex_pry_test][Sample project]]

** ExConf

- Nice module for managing configuration with built-in DSL.
  - It is very easy to create multiple configuration environments.

** Erlubi

- Client library for the Ubigraph visualization server.
  - [[../../../../echo-protocol-in-elixir/][Example usage example]]
    - Red spheres are anonymous processes.
    - Blue spheres are named processes.
    - Green cubes are ports.

** EEx

- Built-in templating language which allows you to embed Elixir code.
  - It is similar to the *ERB*, *EJS* etc.
  - [[../samples/eex_playground][Example usage]]

** Apex

- External dependency which pretty prints *Elixir's* data structures.
  - [[../samples/apex_playground][Example usage]]

** exprotobuf

- Protocol Buffers are easy cross-language serialization and
  deserialization standard from Google.
  - `exprotobuf` is an *Elixir* implementation of that standard.
    - [[../samples/exprotobuf_playground][Example usage]]

** Deployment (Heroku)

- `BUILD_PACK_URL=https://github.com/HashNuke/heroku-buildpack-elixir.git`
  - `heroku create --buildpack $BUILD_PACK_URL"`
  - `elixir_buildpack.config` - BEAM configuration file.
    - `erlang_version=17.5`
    - `elixir_version=1.0.4`
    - `rebar_version=(tag 2.5.1)`
    - `always_build_deps=false`
  - `Procfile` - Process configuration.
    - `web: MIX_ENV=prod mix run --no-halt`

** BERT and BERT-RPC

- *BERT* stands for *Binary ERlang Term* and it is a binary
  serialization and interchange format used by
  `erlang:term_to_binary/1`.
  - *BERT-RPC* is a *RPC* mechanism which uses *BERT* packets as a
    serialization.
  - http://bert-rpc.org/
  - It is trivial to setup communication between e.g. Ruby and
    Elixir/Erlang.
    - JavaScript: https://github.com/rustyio/BERT-JS
    - Ruby: https://github.com/mojombo/bertrpc
    - Python: https://pypi.python.org/pypi/bert/1.0.0

** ExProf

- *Elixir* code profiler available in `hex.pm`.
  - [[../samples/slow_reverse][Example use case and usage]]

** MultiDef

- Library for less-verbose way to define multiple function clauses.
  - `https://github.com/pragdave/mdef`
  - Example:
    ```
    defmodule Play do
      import MultiDef

      mdef number do
        0 -> :zero
        1 -> :one
        2 -> :two
        n when n > 2 and is_number(n) -> :noclue
        1, 2 -> {number(1), number(2)}
      end
    end
    ```
** Benchmarks

*** Benchfella

- Benchmarking tool that includes graph output.
  - *Benchfella* runs files which ends with `*_bench.exs`.
  - Then in module include: `use Benchfella`
    - And you have access to all functions.
      - Example:
        ```
        bench "Meaningful name" do
          # Benchmark source code.
        end
        ```
  - Running benchmark.
    - `elixir -pa /path/to/ebin/ -S mix bench`
    - Besides results in `CLI` you have `HTML` output.

*** Benchwarmer

- Small tool for doing really quick benchmarks.
  - Zero ceremony!
  - Just add it as a dependency and:
    - `Benchwarmer.benchmark([ fn() -> if true, do: true end ])`

** Mailman

- Sending emails from *Elixir*.
  - [[../samples/mailman_playground][Sample project]]
  - *Note*: you should use the Github version, instead of `hex.pm`.

** Arduino with Elixir

- Nice example for communicating from Elixir to Arduino C code via *serial port*
  and simple text-based protocol.
  - https://github.com/knewter/erlang-serial

** Deprecated / Abandoned Libraries

*** Elixiak

- Elixir library for *Riak*.
  - https://github.com/drewkerrigan/elixiak
  - Note: it is not compatible with *Elixir 1.0*.
- [[../samples/elixiak_playground][Example usage with tests]]

*** Dynamo

- https://github.com/dynamo/dynamo
- It is a *Sinatra*-like web framework written in *Elixir*.
- Unfortunately it is discontinued - you should use *Plug* instead.

*** ExLager

- Elixir wrapper for Basho library called *Lager*.
  - [[../samples/OTP/supervised_list_server][Example usage]]

*** Releases (*relex* and *pogo*)

- Unit of deployment for Erlang is a *release*. It is an application
  with *run-time system* and all necessary dependencies.
  - Note: `pogo` and `relex` are not compatible with *Elixir 1.0*.
  - [[../samples/OTP/supervised_list_server][Example usage]]
