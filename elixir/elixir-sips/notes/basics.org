* Elixir Sips - Basics

** Installation

- Installing instructions of official *Erlang* website.
- Precompiled packages delivered by *Erlang Solutions*.

** Types

- *Atoms* - `:foo`, `:"some string"`.
- *Integers* - `1234567`, `1_234_567`.
  - As in *Erlang* - integers are unbounded, so you are limited only
    the amount of RAM.
- *Floating Point Number* - `0.75`, `30.23`.
- *Lists* - `[1, 2, 3]`, `[:foo, 1, [:bar, "string"]]`.
  - Implemented as *linked lists*.
- *Tuples* - ordered non-homogeneous collection of fixed size.
- *Keyword Lists* - `[name: "Wojtek GawroÅ„ski"]`.
  - Syntax sugar over Erlang's *prop lists*
- *Regex* - `Regex.replace %r/[aeiou]/, "Beginning Elixir", "z"`.
- *Boolean* - Only `false` and `nil` are the only falsy values.

** Pattern Matching

- Pattern matching is an assignment to unbound variable name.
  - If the match fail, you will receive `MatchError`.
  - Bounding again the same variable causes an error.
- It provides destructurization mechanism for complex types.
  - You can match complex structures and extract value from it.
- `_` is a *wildcard*, that can be bound multiple times.
  - We don't care about value.
  - You can prefix unused variables with `_`.
- *Pinning variable* is a different concept, non-existing in Erlang.
  - You can *rebind* variable with pattern matching, in order to avoid
    that you have to use `^` sign before the variable name:

    ```elixir
    iex(1)> [a, 2] = [1, 2]
    iex(2)> [^a, 2] = [3, 4]
    ```

    Without that symbol, `a` will be rebound to `3`.

*** Pattern Matching in Function Definitions

- As in *Erlang* you can create multi-head functions, where pattern
  matching distinguish execution flow.

*** Pattern Matching in Case Expression

- *Case* is similar concept to the *switch* clauses in other
  languages, but it is an expression.
  - It uses *pattern matching* to determine which clause should be
    evaluated based on provided input.

** Functions

Functions in *Elixir* are first-class types.

*** Anonymous Functions

- An *anonymous function* with *fn* keyword.

  ```elixir
  print_name = fn
    {:person, first_name, last_name} ->
      first_name <> " " <> last_name
  end
  ```

  - Calling: `print_name.({:person, "W", "G"})`
  - When no clause matches it throws `FunctionClauseError`.
  - Immediate execution: `(fn -> "foo" end).()`

*** Functions as first-class types

- We can:
  - Return a function.
  - Pass them as argument.
  - Create functions that are receiving functions as arguments.
- If you are from *OOP* world, this behavior is similar to the
  *Strategy* pattern.
  - This design pattern is also called a *policy* or *closure*.

** Modules

- *Mix* - amazing tool, which is a bootstrap, build, task runner
  tool. It is supported and delivered with standard *Elixir*
  distribution (*Go*-like approach).
- `defmodule` is responsible for creating a module structure.
   - *Module* is a single unit of structure for your application.
   - It is represented on the *Erlang VM* level.
   - You can define module directly in *REPL*.
     - Module definition will return tuple with an atom `:module`,
       module name, byte code of compiled module and tuple
       describing last function in that module.
- You can easily provide documentation for module and each function,
  - You can access module docs with helper
    `h(:module_name_or_function_with_module_name)` in REPL.
  - Or generate HTML documentation with use of `ExDoc`.
    - You have to add it as a dependency in your project, install
      dependencies and execute `mix docs`.

** Unit Testing

- *ExUnit* - built-in unit testing framework.
- *exercism.io* - community based tool for working with katas.
  - Build by *Katrina Owen* from Ruby community.
- *DocTests* - putting the test cases inside docs comments.
  - Put only this annotation inside unit test:
    `doctest: ModuleName`.
- Command `mix test --cover` generates code coverage.
  - It uses built-in *Erlang* coverage tool.
- There is an additional tool called *Coverex*.
  - [[../samples/pcm_playground][Example usage]]

** Comprehensions

- Syntax changed significantly:
  - From: `lc x inlist [1,2,3], do: x*2`
  - To: `for n <- [1,2,3], do: x*2`
- General syntax is:
  - `for GENERATOR+, FILTER*, do: LAMBDA_OR_DO_BLOCK
  - New syntax supports *bitstrings*, *maps* etc.
  - Generator can be anything which implements `Enumerable` protocol.
  - With use of `into: %{}` you can push into anything that implements
    `Enumerable` protocol.
   ```
   for line <- IO.stream(:stdio, :line),
       into: IO.stream(:stdio, :line),
       do: String.upcase(line)
   ```

** Structs

- `defrecord` became a `defstruct` in new version of Elixir.
- *Records* were modules in Elixir and syntactic sugar around tuples
  in *Erlang*, *Structs* are extensions built on top of maps that
  provide compile-time checks and default values.
- Since *0.13.0* records became deprecated.

** Processes

- Unit of concurrency in *Erlang* is a process.
  - It encapsulates its own state and mechanisms.
  - Only communicates with other processes by asynchronous *message
    passing*.
  - No shared state and memory!
  - It is based on *Actor Model*.
  - Each process has a *mailbox* which stores incoming messages.
  - Code executed inside process is sequential.
    - But multiple processes can run in parallel.
- Again, syntax in *Elixir* slightly changed regarding message
  passing:
  - Old: `pid <- message`
  - New: `send pid, message`

** Pipe operator

- Creating pipeline of functions easily.
  - Syntax sugar for invoking function with first argument passed from
    the previous level output.
  - `a |> b |> c` - output of function `a` is passed as a first argument
    to `b` and so on.
- Thinking in terms of *data transformation* or *data flow*.
- Argument order invalid?
  - Prepare *intermediate function* or *lambda* (ugly solution).

** Dict

- *Dict* is a protocol, e.g. hash dictionary which provides
  dictionary-like behavior. Example implementation from Elixir's
  standard library is a HashDict.
  - `HashDict.new` - Create new dictionary.
  - `Dict.delete` - Remove one element by key.
  - `Dict.drop` - As above, but enables deleting by multiple keys.
  - `Dict.empty` - Returns an empty dictionary based on passed
    dictionary.
  - `Dict.equal?` - Compares strictly two dictionaries.
  - `Dict.fetch` - Returns a tuple with atom `:ok` and value, or atom
    `:error`.
  - `Dict.fetch!` - As above, but it raises error or returns value,
    not a tuple.
  - `Dict.get` - Returns value or default for the corresponding
    key. Or `nil` if dictionary does not have specified key.
  - `Dict.has_key?` - Returns boolean that dictionary has provided
    key.
  - `Dict.keys` - Returns list of all keys, no order guaranteed.
  - `Dict.merge` - Merge two dictionaries, in case of conflict value
    from second dictionary wins. Or you can provide function for
    resolving conflict in your way.
  - `Dict.pop` - Returns value associated with key and modified
    dictionary without that key. You can provide default value.
  - `Dict.put` - Stores value under specified key and returns modified
    dictionary. If key exists, it will replace the value.
  - `Dict.put_new` - As above, but puts value only when key does not
    exist.
  - `Dict.size` - Returns number of elements in dictionary.
  - `Dict.split` - Returns two dictionaries, one with keys specified
    as an argument, and second with rest of keys.
  - `Dict.take` - As above but returns only the first dictionary.
  - `Dict.to_list` - List of key-value pairs stored in dictionary. No
    order guaranteed.
  - `Dict.update` - Updates a specified key by value returned from a
    function passed to it and it returns modified dictionary.
  - `Dict.update!` - As above, but it raises an exception if key is
    not present.
  - `Dict.values` - Returns list of all values in the dictionary. No
    order guaranteed.

** Scripts

- [[../samples/current_weather][Command line modules and Elixir Scripts]]

** Binaries and Bitwise

- Syntax:
  - `<<1, 2, 3>>`, `"foo"`
  - `"foo" == <<'f', 'o', 'o'>> == <<102, 111, 111>>`
- IPv4 packet:
  - `<<4 :: [integer, size(4)], 5 :: [integer, size(4)]>>`
  - `<<version :: [integer, size(4)], header_length :: [integer, size(4)]>> = "E"`
- [[../samples/ip_parser][Example use case]]
- `use Bitwise`.
  - `band(7,8) == 0`
  - `band(7,2) == 2`
  - `bor(7,8) == 15`
  - `bor(2,8) == 10`
  - `bxor(7,8) == 15`
  - `bxor(2,7) == 5`
  - `bsl(1, 3) == 8`
  - `0 |> bor(1<<18) |> bor(1<<20) |> bor(1<<22) |> bor(1<<24) |> bor(1<<28)`

** File

Note: all of functions has version with bang which raises an
exception, rather than returning an error.

- `File.cd` - Changing current working directory.
- `File.chgrp` - Changes user group given by GID for a file/directory.
- `File.chmod` - Changes UNIX file mode for a file/directory.
- `File.chown` - Changes the owner given by UID of a file/directory.
- `File.close` - Closes the file referenced by *file descriptor*.
- `File.copy` - Copies source to destination, you can specify bytes
  (default to `:infinity`).
- `File.cp` - Copies source to destination preserving its mode. It has
  callback for a decision about overriding a file.
- `File.cp_r` - Copies source to destination recursively.
- `File.cwd` - Gets the current working directory.
- `File.dir?` - Checks if the passed path is a directory.
- `File.exists?` - Checks if the passed path exists.
- `File.ls` - Lists all files from a given directory.
- `File.mkdir` - Creates a directory, like the `mkdir` command.
- `File.mkdir_p` - Creates multiple directories, like the `mkdir -p`
  command.
- `File.open` - Opening a file, it returns a *file descriptor*. Nice
  way to deal with files is to use `File.open/3` which given by path,
  opening mode and callback, which will be executed on the file, and
  file will be closed immediately after the callback returns
  (successfully or not).
- `File.read` - Reads data from the file, given by amount of bytes
  (default: `:infinity`).
- `File.regular?` - Returns true if the file is a regular file (not a
  socket, device, directory etc.).
- `File.rm` - Removes a file.
- `File.rm_rf` - Removes files and directories recursively. Returns
  list of removed files.
- `File.rmdir` - Tries to delete a directory for a given path.
- `File.stat` - Returns file stats or tuple with atom `:error` and
  reason.
- `File.stream!` - Streams file content, line by line.
- `File.stream_to!` - Writes a stream to a file.
- `File.touch` - Touches a file, by creating it or changing
  modification dates.
- `File.write` - Writes bytes to a *file descriptor*.
- `File.write_stat` - Writes stats given as an argument to a file
  passed as a path.

** Maps and Structs

- New date structure introduced in *Erlang 17.0* and *Elixir 0.13*.
  - `map = %{:foo => bar}` - Creating new map.
  - `%{map | foo: "BAR" }` - Updating existing key.
  - `map[:foo] == map.foo` - Ways for getting a key.
  - `%{ foo: something } = map` - Pattern matching.
- *Struct* is a tagged map.
  - To create a *struct* you should provide `__struct__` function
    implementation in a given module, that have to return a map.
    ```
    defmodule SomeStruct do
      def __struct__ do
        %{foo: "bar"}
      end
    end
    ```
  - `%SomeStruct{}` - Creating a new structure.
  - Elixir provides a `defstruct` macro, which eases implementing
    structs - it should be used inside the `defmodule`.
    ```
    defmodule Person do
      defstruct first_name: nil, last_name: "Dudington"

      def name(person) do
        "#{person.first_name} #{person.last_name}"
      end
    end
    ```
    - `josh = %Person{first_name: "Josh"}`
    - `Person.name(josh)`
    - `%Person{josh | last_name: "Adams"}`
    - `map = %{first_name: "Josh"}
    - `%Person{map | first_name: "Lance"}`
      - It raises an `BadStructError`.
      - So it means that *structs* have static structure.

*** Migrating Records to Structs (Tagged Maps)

- Porting from records to structs maps is easy.
  - The only thing that changes is the syntax (curly brackets) and
    module definition because `defrecord` creates an internal module,
    when a struct needs to be inside a module upfront.

** Mix

- Custom Tasks.
  - [[../samples/custom_mix][Custom Mix tasks example]]

** Protocols

- Polymorphism mechanism built-in *Elixir*.
  - [[../samples/odd_protocol][Example usage]]

** Process Dictionary

- Process-local state, beware of that:
  - You likely should never use it!
  - It can destroy all benefits of functional programming.
  - You can introduce easily side-effects or global, mutable
    state. Even the local mutable state can be dangerous.
- Core piece of *Erlang VM*.
- Functions:
  - `Process.put(:foo, "bar")` - Store value under given key.
  - `Process.get(:foo)` - Get value from dictionary.
  - `Process.get(:foo, "baz")` - As above, but with default value.
  - `Process.get_keys("bar")` - List all keys with that value.
  - `Process.get` - Get full dictionary out of process.
  - `:erlang.erase` - Delete all items (no *Elixir* function).
  - Process dictionary is available also in:
    - `Process.info(pid)`

** Nested data structures

- Features added in the *Elixir* 0.14 in order to manipulate nested
  data structures much easier than previously.
  - [[../samples/nested_playground][Example usage]]

** Errors and Exceptions

- Example:
  - `1 / 0` - it throws an `ArithmeticError`.
- How to throw an error:
  - `raise ArithmeticError, message: nope.jpg`
  - `raise "some runtime error"`
- You can define your own error with `defexception`.
- Catching an error (it should be rarely used):
  ```
  try do
    raise RuntimeError, message: "nope"
  rescue
    e in RuntimeError ->
      IO.puts "Caught an error: #{inspect e}"
  end
  ```
  - Standard library returns a tuple with error and reason, but also
    sometimes it defines function with bang at the end, which throws
    an error.
    - If you would like to implement such convention by
      yourself you should provide both methods, and that one with the
      bang should be built on top of previous one, with adding the
      exception only.

** Monitors and Links

- *Monitor* is a unidirectional bound between two processes.
  - If an observed process dies, observer receives a message:
    - `{:DOWN, reference, type, pid, reason}`
  - You can `demonitor` a process, when you've monitored it at the
    first place.
  - `Process.monitor/1`
  - `Process.demonitor/1`
- *Link* is a bidirectional bound between two processes. If any of
  processes will die, that information will propagate to the second
  one, which will cause an abnormal exit there as well (or a message
  if process is *trapping exits*).
  - When *exits are trapped* we will receive a message:
    - `{:EXIT, pid, reason}`
  - `Process.link/1`
  - `Process.unlink/1` (this is bidirectional as well).
  - `Process.flag(:trap_exit, true)`

** Set

- Set module implements mathematical concept of *set*.
- By default *Elixir* implements a `HashSet`.
  - `set = HashSet.new`
  - `set = Set.put(set, 1)`
  - `letters = ~w(a b c d e f g h i j k l m n o p q r s t u v w x y z)`
  - `vowels = ~w(a e i o u)`
  - `letterset = for letter <- letters, into: HashSet.new, do: letter`
  - `vowelset = for vowel <- vowels, into: HashSet.new, do: vowel`
  - `consonantset = Set.difference(letterset, vowelset)`
  - `Set.size(consonantset)`
  - `Set.subset?(vowelset, letterset)`
  - `Set.disjoint?(vowelset, letterset)`
  - `Set.member?(consonantset, "a")`
  - `Set.member?(vowelset, "a")`
  - `appleset = for letter <- ~w(a p p l e), into: HashSet.new, do: letter`
  - `Set.intersection(appleset, vowelset)`
  - `Set.to_list(appleset)`
  - `Set.union(appleset, vowelset)`

** Standard pipes in Elixir

- Example:
  ```
  defmodule Piper do
    def loop do
      case IO.read(:stdio, :line) do
        :eof -> :ok
        {:error, reason} -> IO.puts "Error: #{reason}"
        data ->
          upcased = String.upcase(data)
          IO.puts(:stdio, upcased)
          loop
      end
    end
  end

  Piper.loop
  ```

** escript

- Script which can be executed on any machine that has *Erlang VM*
  installed.
  - `mix escript.build`
  - *NOTE*: Everything that varies per user basis should be provided
    by system environment variables, because everything is bundled
    inside the `escript` executable, event the configuration file.
  - [[../samples/everyoneapi_cli][Example usage]]

** Types specification

- *Erlang* and *Elixir* has ability to add type annotations to your code in
  order to help tools which does static code analysis.
  - [[../samples/typespecs_playground][Example usage]]
- Helpers and functions:
  - There is an additional helper which gets the type specification:
    - `s(Module.function)`
  - `Kernel.Typespec.beam_specs(Module)` gets all typespecs defined in a given
    module.

** Introspection

- `:erlang.process_info/1`
  - You can investigate links, status, initial call.
  - You can see reductions, group leader, is it trapping exits.
  - By default: *it returns all message in the mailbox*.
    - Beware! You can increase RAM by that.
    - The same thing applies to *process dictionary*.
  - You can use `:erlang.process_info/2` to narrow down amount of certain
    properties.
- `:c.regs()` returns list of registered procs and ports on actual node.
- `:c.i()` return list of processes on actual node.
- `:erlang.process_flag(:save_calls, 30)`
  - It saves given amount of calls for that process.
  - You can obtain that by `:erlang.process_info(pid, :last_calls)`.
- `:erlang.process_display(pid, :backtrace)`
  - It returns actual backtrace for given process.
- `:erlang.suspend_process(pid)`
  - It suspend given process, it receives messages normally but it won't do any
    operation (reduction counter will not increase during suspend). You can
    resume it by `:erlang.resume_process(pid)`.

** Dialyzer

- Static analysis tool for *Erlang* programs.
  - It uses type annotations, finds dead code and other discrepancies.
  - In *Elixir* we need to run *Dialyzer* against our *BEAM* files.
- At first we need to build *PLT*:
  - `dialyzer --build_plt --apps erts /usr/lib/elixir/bin/../lib/elixir/ebin`.
- In order to run it against *BEAM* files we need to execute:
  - `dialyzer /path/to/_build/ebin/directory`
- [[../samples/dialyzer_playground][Example usage]]

** Randomness on Erlang VM

- *Erlang's* pseudo-random number generator keeps state in the *process dictionary*.
  - So basically you should seed every single process in order to receive true
    randomness, otherwise you will have a repeatable state every single call
    from `:random` module.
  - You should be aware of fact that also `start/1` and `init/1` runs in a
    different contexts. Start is invoked in the process above, and then it
    spawns new process, the actual `gen_*` behavior, only the `init/1` is
    invoked inside the actually spawned process, so there is a place for
    `random:seed/1`.
