* 7.4 Exercises
** Review Questions
*** 1. Name some of the common sources of leaks in Erlang programs.
    - Atom table.
    - Reference counted binaries.
    - ETS
    - Processes memory.
*** 2. What are the two main types of binaries in Erlang?
    - Allocated in process heap (size < 64 bytes).
    - Shared internally, in global heap, passed around as pointers with
      reference counters.
*** 3. What could be to blame if no specific data type seems to be the source of a leak?
    - You should look into NIFs or memory fragmentation.
*** 4. If you find the node died with a process having a lot of memory, what could you do to find out which one it was?
    - You will see that guy to blame inside crash dump.
*** 5. How could code itself cause a leak?
    - If your code creates orphaned processes, or processes are causing
      short-living bursts of allocations when your memory is scarce, or you are
      creating atoms from input that is provided by users or 3rd parties.
*** 6. How can you find out if garbage collections are taking too long to run?
    - By setting up `erlang:system_monitor/1`.
** Open-ended Questions
*** 1. How could you verify if a leak is caused by forgetting to kill processes, or by processes using too much memory on their own?
    - In first case you'll look on process count, in latter you can use `recon:proc_count(memory, 3).`.
*** 2. A process opens a 150MB log file in binary mode to go extract a piece of information from it, and then stores that information in an ETS table. After figuring out you have a binary memory leak, what should be done to minimize binary memory usage on the node?
    - You should copy that fragment with `binary:copy/1,2` and store that fragment instead.
*** 3. What could you use to find out if ETS tables are growing too fast?
    - `erlang:memory().` or undocumented `ets:i().`.
*** 4. What steps should you go through to find out that a node is likely suffering from fragmentation? How could you disprove the idea that is could be due to a NIF or driver leaking memory?
    - You should check first if that is not a memory fragmentation (you
      determine that by calls to `recon_alloc:memory(usage).` and
      `recon_alloc:memory(allocated).`) if it is not, you should point yourself
      to NIFs / drivers / VM internals.
*** 5. How could you find out if a process with a large mailbox (from reading message_queue_len) seems to be leaking data from there, or never handling new messages?
    - You can enforce a GCing, if it helped it will indicate to leak (binaries
      probably) - if not, it is probably a message queue.
*** 6. A process with a large memory footprint seems to be rarely running garbage collections. What could explain this?
    - It is not doing much work, and it is not scheduled by VM to do GC or
      perform any work. Not used processes are not scheduled to GC.
*** 7. When should you alter the allocation strategies on your nodes? Should you prefer to tweak this, or the way you wrote code?
    - You can tweak settings, but you should have great understanding of the
      internals and how the allocators work.
** Hands-On
*** 1. Using any system you know or have to maintain in Erlang (including toy systems), can you figure out if there are any binary memory leaks on there?
    - Yes you can do it by `recon:proc_count(binary_memory, 3).` and them doing
      `recon:bin_leak(5).` and investigating results.
